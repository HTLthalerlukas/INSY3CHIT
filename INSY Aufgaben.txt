1) select * from depts;

2) select * from emps where dept_id = 10;

3) select ENAME, JOB, SAL from emps;

4) select * from emps where dept_id != 10;

5) select * from emps where COMM > SAL;

6) select * from emps where HIREDATE = '1981-12-03';

7) select ENAME, SAL from emps where SAL<1250 or SAL>1600;

8) select * from emps where JOB != 'PRESIDENT' and JOB != 'MANAGER';

9) select ENAME from emps where ENAME LIKE '__a%';

10) select id, ENAME, JOB from emps where COMM is not null;

11) select * from emps ORDER BY COMM;

12) select * from emps where JOB not in ('PRESIDENT', 'MANAGER') order by dept_id ASC, HIREDATE DESC;

13) select ENAME from emps where LENGTH(ENAME) = 6;

14) select CONCAT(ENAME, '-', JOB) AS 'Mitarbeiter und TÃ¤tigkeit' from emps where dept_id = 30;

15) select SAL, COMM from emps;
    select sal, IFNULL(COMM, 0) from emps;
    Der Unterschied ist, dass bei IFNULL(COMM, 0) statt "NULL", "0" bei COMM steht

16) select ENAME, SAL AS MONTHLY, SAL / 22 AS DAILY, (SAL / 22) / 8 AS HOURLY from emps;

17) select SUM(SAL) AS 'Gesamtbetrag' from emps;

18) select AVG(COMM + IFNULL(COMM, '250')) from emps;

19) select COUNT(SAL) AS anzahl_Gehalt, COUNT(COMM) AS anzahl_Provision from emps where dept_id = 30;

20) select COUNT(DISTINCT JOB) AS unique_Job from emps;

21) select DISTINCT parent_id from emps;
    select COUNT(DISTINCT parent_id) from emps;
    Es liefert Unterschiedliche Ergebnisse, da bei einem die einzigartigen ids ausgegeben und beim anderen die Anzahl der unterschiedlichen ids

22) select SUM(SAL), SUM(COMM), COUNT(SAL), COUNT(COMM), AVG(SAL), AVG(COMM) from emps where dept_id = 30;

23) select COUNT(DISTINCT JOB) AS uniqueJobs from emps where JOB not like 'MANAGER' AND JOB not like 'PRESIDENT';

24) select COUNT(*)/COUNT(DISTINCT dept_id) from emps;

25) select * from emps where JOB = 'MANAGER' OR JOB = 'PRESIDENT';

26) select ENAME, JOB, COMM from emps where COMM >= SAL/4;

27) select MIN(SAL+COMM) from emps;

28) select MIN(HIREDATE) from emps;

29) select JOB, COUNT(ID) AS anzahl_personen, dept_id from emps GROUP BY dept_id, JOB ORDER BY dept_id, JOB;

30) select MAX(SAL), MIN(SAL), dept_id from emps GROUP BY dept_id ORDER BY dept_id;

31) COMM = 0 != COMM IS NULL, bei COMM = 0 gibt es eine COMM, wessen betrag 0 ist, bei IS NULL gibt es keinen Wert;

32) COUNT(*) gibt alle Werte aus, COUNT(parent_id) gibt IS NULL nicht aus, COUNT(DISTINCT parent_id) gibt nur einzigartige parent_id's aus

33) COUNT(), SUM(), AVG(), MIN(), MAX()

34) select MIN(SAL), MIN(COMM), MAX(SAL), MAX(COMM), AVG(SAL), AVG(COMM), COUNT(SAL), COUNT(COMM) from emps where dept_id = 30;

35) select MIN(SAL), MAX(SAL), AVG(SAL) from emps GROUP BY dept_id ORDER BY dept_id;

36) select MIN(SAL), MAX(SAL), AVG(SAL), COUNT(id) from emps where JOB NOT LIKE 'MANAGER' AND JOB NOT LIKE 'PRESIDENT' GROUP BY dept_id ORDER BY dept_id;

37) select AVG(DISTINCT SAL) from emps where COMM = 0 OR COMM IS NULL GROUP BY JOB ORDER BY JOB;

38) select SUM((CASE when COMM = 0 OR COMM IS NULL then SAL+100 else SAL end)*12) from emps where COMM = 0 OR COMM IS NULL;

39) geht nicht in MYSQL

40) select AVG(SAL) as average_sal from emps GROUP BY JOB HAVING AVG(SAL)>1500 ORDER BY AVG(SAL);

41) select dept_id from emps where JOB = 'CLERK' GROUP BY dept_id HAVING COUNT(*) >= 2;

42) 	WHERE: Filtert vor dem Gruppieren
	HAVING: Filtert nach dem Gruppieren

43) select JOB from emps GROUP BY JOB HAVING AVG(SAL) > 1500 ORDER BY JOB;

44) WHERE wird vor HAVING ausgewertet

45) WHERE filtert bevor gruppiert wird

46) select ENAME from emps where SAL > (select SAL from emps where ENAME = 'JONES') GROUP BY ENAME;

47) select e.ENAME, e.SAL, (select ENAME from emps where id = e.parent_id) as Vorgesetzter from emps e where SAL>(select SAL from emps where id = e.parent_id);

48) select  ENAME from emps where SAL<((select SAL from emps where JOB = 'PRESIDENT')*0.3);

49) select DNAME e from depts e where (select count(*) from emps where dept_id=e.DEPTNO) = 0;

50) select ENAME from emps where JOB = (select JOB from emps where ENAME = 'JONES');

51) select ENAME, JOB, SAL from emps where SAL = (select MAX(SAL) from emps);

52) select ENAME from emps where LENGTH(ENAME) = (select MAX(LENGTH(ENAME)) from emps);

53) select COUNT(*) from emps where dept_id = (select DEPTNO from depts where LOC = 'NEW YORK');

54) select ENAME from emps where dept_id = (select DEPTNO from depts where LOC = 'NEW YORK');

55) select ENAME from emps where dept_id = (select DEPTNO from depts where LOC = 'CHICAGO') GROUP BY ENAME, JOB HAVING JOB = (select JOB from emps where ENAME = 'ALLEN') ORDER BY ENAME;

56) select JOB from emps GROUP BY JOB HAVING AVG(SAL)>(select AVG(SAL) from emps where JOB = 'SALESMAN');

57) select ENAME, JOB from emps where dept_id = 10 AND JOB IN (select JOB from emps where dept_id = 30);

58) select ENAME, JOB from emps where dept_id = 10 AND JOB NOT IN (select JOB from emps where dept_id = 30);

59) select ENAME, JOB from emps where  JOB IN (select JOB from emps where dept_id = (select DEPTNO from depts where DNAME = 'SALES'));

60) select e.* from emps e where HIREDATE = (select MAX(HIREDATE) from emps where dept_id = e.dept_id) ORDER BY dept_id;

61) select DEPTNO from depts where DEPTNO IN (select dept_id from emps);

62) select DEPT_ID, ENAME, SAL from emps where SAL > (select AVG(SAL) from emps) ORDER BY dept_id;

63) select DNAME, DEPTNO from depts where 4 <= (select count(dept_id) from emps where dept_id = DEPTNO);

64) select e.ENAME from emps e join (select dept_id, AVG(SAL) as AVGSAL from emps group by dept_id) a on e.dept_id=a.dept_id where e.SAL*1.1>=a.AVGSAL or e.SAL*0.9<=a.AVGSAL;

65) SELECT e.ENAME, d.DNAME FROM emps e JOIN depts d ON e.dept_id = d.DEPTNO WHERE d.LOC = 'CHICAGO';